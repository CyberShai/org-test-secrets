name: Branch creation

on: pull_request

env:
  GH_TOKEN: ${{ github.TOKEN }}

jobs:
  create-branch:
    if: "!startsWith(github.head_ref, 'integration/')"
    runs-on: ubuntu-latest
    outputs:
      new_branch: ${{ steps.new_branch.outputs.branch }}
    steps:
      - name: Set up Git repository
        uses: actions/checkout@v2
        with:
          token: ${{ env.GH_TOKEN }}

      - name: Create branch name
        id: new_branch
        run: |
          NEW_BRANCH="integration/new-branch-test"
          echo Creating new branch $NEW_BRANCH
          echo "::set-output name=branch::$NEW_BRANCH"

      - name: Save branch
        run: |
          echo "New branch: ${{ steps.new_branch.outputs.branch }}"
          git checkout -b ${{ steps.new_branch.outputs.branch }}
          git push origin ${{ steps.new_branch.outputs.branch }}


  open-pull-request:
    if: "!startsWith(github.head_ref, 'integration/')"
    runs-on: ubuntu-latest
    outputs:
      current_pr: ${{ steps.create_pr.outputs.result }}
    permissions:
      pull-requests: write
      security-events: write
    needs: [create-branch]
    steps:
      - name: Create Pull Request
        id: create_pr
        uses: actions/github-script@v6
        with:
          script: |
            const { repo, owner } = context.repo;
            const result = await github.rest.pulls.create({
              title: '[Example] Simple demo 4',
              owner,
              repo,
              head: '${{needs.create-branch.outputs.new_branch}}',
              base: 'main',
              body: [
                'This PR is auto-generated by',
                '[actions/github-script](https://github.com/actions/github-script).'
              ].join('\n')
            });
            const pr = result.data.number;
            console.log({ PR: result.data.number })
            github.rest.issues.addLabels({
              owner,
              repo,
              issue_number: result.data.number,
              labels: ['feature', 'automated pr']
            });
            return pr;

      - name: Get value from number
        id: value_pr
        run: |
          echo "PR ${{steps.create_pr.outputs.result}}"

  make-commit:
    if: "!startsWith(github.head_ref, 'integration/')"
    runs-on: ubuntu-latest
    needs: [create-branch, open-pull-request]
    steps:
      - name: Set up Git repository
        uses: actions/checkout@v2
        with:
          token: ${{ env.GH_TOKEN }}

      - name: Get all branches
        run: |
          git fetch -p 
          git fetch --all    
          git branch -a

      - name: Initialize mandatory git config
        run: |
          git config user.name "Bryan Sanchez"
          git config user.email sarabryanale@outlook.com

      - name: Create fake commit
        run: |
          echo Creating new commit
          git checkout ${{needs.create-branch.outputs.new_branch}}
          git commit --allow-empty -m "Empty-Commit"
          git push origin ${{needs.create-branch.outputs.new_branch}}

      - name: Get all branches
        run: |
          git fetch -p 
          git fetch --all    
          git branch -a
      
      - name: Create branch from master
        run: |
          echo "New branch from master: integration/test-2-3"
          git checkout main
          git checkout -b integration/test-2-3
          git rebase origin/test-branch-pr
          git commit --allow-empty -m "Empty-Commit"
          git push origin integration/test-2-3
          gh pr create --title "The bug is fixed" --body "Everything works again"


# Crear rama

# Hacer pull request a partir de la rama

# Hacer commit vac√≠o
