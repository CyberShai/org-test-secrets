name: Create pull request

on:
  pull_request:
    branches:
      - main

env:
  GH_TOKEN: ${{ github.TOKEN }}
  PR_NUMBER: ${{ github.event.number }}

jobs:
  get_branch_info:
    if: "!startsWith(github.head_ref, 'integration/')"
    outputs:
      current_branch_name: ${{ steps.branch_name.outputs.current_branch }}
      integration_branch_name: ${{ steps.branch_name.outputs.integration_branch }}
    runs-on: ubuntu-20.04
    steps:
      - name: Create branch name
        id: branch_name
        shell: bash
        run: |
          CURRENT_BRANCH_NAME=$(echo ${GITHUB_HEAD_REF} | tr / -)
          INTEGRATION_BRANCH_NAME="integration/${{env.PR_NUMBER}}-$CURRENT_BRANCH_NAME"
          
          echo "CURRENT_BRANCH_NAME=$CURRENT_BRANCH_NAME"
          echo "INTEGRATION_BRANCH_NAME=$INTEGRATION_BRANCH_NAME"

          echo "::set-output name=current_branch::$CURRENT_BRANCH_NAME"
          echo "::set-output name=integration_branch::$INTEGRATION_BRANCH_NAME"

  create_integration_branch: ## TODO: Si el proceso falla, se deber√≠a eliminar la rama creada 
    if: "!startsWith(github.head_ref, 'integration/')"
    runs-on: ubuntu-20.04
    needs: get_branch_info
    steps: 
      - name: Set up Git repository
        uses: actions/checkout@v2
        with:
          token: ${{ env.GH_TOKEN }}
  
      - name: Initialize mandatory git config
        run: |
          git config user.name "GitHub Actions"
          git config user.email noreply@github.com
      
      - name: Create release branch
        run: |
          git checkout -b ${{needs.get_branch_info.outputs.integration_branch_name}}
          git push origin ${{needs.get_branch_info.outputs.integration_branch_name}}
      
  
  create-pull-request:
    if: "!startsWith(github.head_ref, 'integration/')"
    permissions:
      pull-requests: write
      security-events: write
    needs: [get_branch_info, create_integration_branch]
    runs-on: ubuntu-20.04
    steps:
      - name: Create Pull Request
        uses: actions/github-script@v6
        with:
          script: |
            const { repo, owner } = context.repo;
            const result = await github.rest.pulls.create({
              title: '[Example] Simple demo 4',
              owner,
              repo,
              head: '${{needs.get_branch_info.outputs.integration_branch_name}}',
              base: 'main',
              body: [
                'This PR is auto-generated by',
                '[actions/github-script](https://github.com/actions/github-script).'
              ].join('\n')
            });
            github.rest.issues.addLabels({
              owner,
              repo,
              issue_number: result.data.number,
              labels: ['feature', 'automated pr']
            });
      
